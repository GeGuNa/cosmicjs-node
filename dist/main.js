"use strict";

var _mainMethods;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HTTP_METHODS = require('./helpers/http_methods');

var _require = require('./helpers/request_handler'),
    requestHandler = _require.requestHandler;

var _require2 = require('./helpers/constants'),
    URI = _require2.URI;

var mainMethods = (_mainMethods = {
  authenticate: function authenticate(params) {
    var endpoint = "".concat(URI, "/authenticate");
    return requestHandler(HTTP_METHODS.POST, endpoint, params);
  },
  getUser: function getUser() {
    var endpoint = "".concat(URI, "/user");
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  getBuckets: function getBuckets() {
    var endpoint = "".concat(URI, "/projects");
    return requestHandler(HTTP_METHODS.GET, endpoint);
  }
}, _defineProperty(_mainMethods, "getBuckets", function getBuckets() {
  var endpoint = "".concat(URI, "/buckets");
  return requestHandler(HTTP_METHODS.GET, endpoint);
}), _defineProperty(_mainMethods, "getBucket", function getBucket(params) {
  var endpoint = "".concat(URI, "/buckets/").concat(params.slug);
  return requestHandler(HTTP_METHODS.GET, endpoint);
}), _defineProperty(_mainMethods, "addBucket", function addBucket(params) {
  var endpoint = "".concat(URI, "/buckets");
  return requestHandler(HTTP_METHODS.POST, endpoint, params);
}), _defineProperty(_mainMethods, "deleteBucket", function deleteBucket(params) {
  var endpoint = "".concat(URI, "/buckets/").concat(params.slug);
  return requestHandler(HTTP_METHODS.DELETE, endpoint, params);
}), _mainMethods);
module.exports = mainMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbIkhUVFBfTUVUSE9EUyIsInJlcXVpcmUiLCJyZXF1ZXN0SGFuZGxlciIsIlVSSSIsIm1haW5NZXRob2RzIiwiYXV0aGVudGljYXRlIiwicGFyYW1zIiwiZW5kcG9pbnQiLCJQT1NUIiwiZ2V0VXNlciIsIkdFVCIsImdldEJ1Y2tldHMiLCJzbHVnIiwiREVMRVRFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsd0JBQUQsQ0FBNUI7O2VBQzJCQSxPQUFPLENBQUMsMkJBQUQsQztJQUExQkMsYyxZQUFBQSxjOztnQkFDUUQsT0FBTyxDQUFDLHFCQUFELEM7SUFBZkUsRyxhQUFBQSxHOztBQUVSLElBQU1DLFdBQVc7QUFDZkMsRUFBQUEsWUFBWSxFQUFFLHNCQUFDQyxNQUFELEVBQVk7QUFDeEIsUUFBTUMsUUFBUSxhQUFNSixHQUFOLGtCQUFkO0FBQ0EsV0FBT0QsY0FBYyxDQUFDRixZQUFZLENBQUNRLElBQWQsRUFBb0JELFFBQXBCLEVBQThCRCxNQUE5QixDQUFyQjtBQUNELEdBSmM7QUFLZkcsRUFBQUEsT0FBTyxFQUFFLG1CQUFNO0FBQ2IsUUFBTUYsUUFBUSxhQUFNSixHQUFOLFVBQWQ7QUFDQSxXQUFPRCxjQUFjLENBQUNGLFlBQVksQ0FBQ1UsR0FBZCxFQUFtQkgsUUFBbkIsQ0FBckI7QUFDRCxHQVJjO0FBU2ZJLEVBQUFBLFVBQVUsRUFBRSxzQkFBTTtBQUNoQixRQUFNSixRQUFRLGFBQU1KLEdBQU4sY0FBZDtBQUNBLFdBQU9ELGNBQWMsQ0FBQ0YsWUFBWSxDQUFDVSxHQUFkLEVBQW1CSCxRQUFuQixDQUFyQjtBQUNEO0FBWmMsK0NBYUgsc0JBQU07QUFDaEIsTUFBTUEsUUFBUSxhQUFNSixHQUFOLGFBQWQ7QUFDQSxTQUFPRCxjQUFjLENBQUNGLFlBQVksQ0FBQ1UsR0FBZCxFQUFtQkgsUUFBbkIsQ0FBckI7QUFDRCxDQWhCYyw4Q0FpQkosbUJBQUNELE1BQUQsRUFBWTtBQUNyQixNQUFNQyxRQUFRLGFBQU1KLEdBQU4sc0JBQXFCRyxNQUFNLENBQUNNLElBQTVCLENBQWQ7QUFDQSxTQUFPVixjQUFjLENBQUNGLFlBQVksQ0FBQ1UsR0FBZCxFQUFtQkgsUUFBbkIsQ0FBckI7QUFDRCxDQXBCYyw4Q0FxQkosbUJBQUNELE1BQUQsRUFBWTtBQUNyQixNQUFNQyxRQUFRLGFBQU1KLEdBQU4sYUFBZDtBQUNBLFNBQU9ELGNBQWMsQ0FBQ0YsWUFBWSxDQUFDUSxJQUFkLEVBQW9CRCxRQUFwQixFQUE4QkQsTUFBOUIsQ0FBckI7QUFDRCxDQXhCYyxpREF5QkQsc0JBQUNBLE1BQUQsRUFBWTtBQUN4QixNQUFNQyxRQUFRLGFBQU1KLEdBQU4sc0JBQXFCRyxNQUFNLENBQUNNLElBQTVCLENBQWQ7QUFDQSxTQUFPVixjQUFjLENBQUNGLFlBQVksQ0FBQ2EsTUFBZCxFQUFzQk4sUUFBdEIsRUFBZ0NELE1BQWhDLENBQXJCO0FBQ0QsQ0E1QmMsZ0JBQWpCO0FBK0JBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJYLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSFRUUF9NRVRIT0RTID0gcmVxdWlyZSgnLi9oZWxwZXJzL2h0dHBfbWV0aG9kcycpXG5jb25zdCB7IHJlcXVlc3RIYW5kbGVyIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvcmVxdWVzdF9oYW5kbGVyJylcbmNvbnN0IHsgVVJJIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvY29uc3RhbnRzJylcblxuY29uc3QgbWFpbk1ldGhvZHMgPSB7XG4gIGF1dGhlbnRpY2F0ZTogKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7VVJJfS9hdXRoZW50aWNhdGVgXG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyKEhUVFBfTUVUSE9EUy5QT1NULCBlbmRwb2ludCwgcGFyYW1zKVxuICB9LFxuICBnZXRVc2VyOiAoKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L3VzZXJgXG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyKEhUVFBfTUVUSE9EUy5HRVQsIGVuZHBvaW50KVxuICB9LFxuICBnZXRCdWNrZXRzOiAoKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L3Byb2plY3RzYFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuR0VULCBlbmRwb2ludClcbiAgfSxcbiAgZ2V0QnVja2V0czogKCkgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7VVJJfS9idWNrZXRzYFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuR0VULCBlbmRwb2ludClcbiAgfSxcbiAgZ2V0QnVja2V0OiAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L2J1Y2tldHMvJHtwYXJhbXMuc2x1Z31gXG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyKEhUVFBfTUVUSE9EUy5HRVQsIGVuZHBvaW50KVxuICB9LFxuICBhZGRCdWNrZXQ6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0c2BcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBPU1QsIGVuZHBvaW50LCBwYXJhbXMpXG4gIH0sXG4gIGRlbGV0ZUJ1Y2tldDogKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7VVJJfS9idWNrZXRzLyR7cGFyYW1zLnNsdWd9YFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuREVMRVRFLCBlbmRwb2ludCwgcGFyYW1zKVxuICB9LFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1haW5NZXRob2RzXG4iXX0=